/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * heFFTe project, https://bitbucket.org/icl/heffte/
 * Copyright (c) 2020, University of Tennessee.
 * Distributed under a BSD 3-Clause license: see LICENSE for details.
 */

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif



#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif


#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl);
SWIGEXPORT void SWIG_store_exception(const char* decl, int errcode, const char *msg);
#ifdef __cplusplus
}
#endif


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
};


#define SWIG_check_nonnull(PTR, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(PTR)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_NullReferenceError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}



#define SWIG_VERSION 0x040200
#define SWIGFORTRAN
#define SWIGPOLICY_heffte_fft3d_Sl__Sp_heffte_backend_onemkl_SP__Sg_ swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_heffte_fft3d_r2c_Sl__Sp_heffte_backend_onemkl_SP__Sg_ swig::ASSIGNMENT_DEFAULT

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 



extern "C" {

int heffte_onemkl_ierr = 0;

}



#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


#include <string.h>


// Stored exception message
SWIGINTERN const char* swig_last_exception_cstr = NULL;
// Retrieve error message
SWIGEXPORT const char* heffte_onemkl_get_serr() {
  if (!swig_last_exception_cstr) {
    SWIG_store_exception("UNKNOWN", SWIG_RuntimeError,
                         "no error string was present");
  }
  return swig_last_exception_cstr;
}


#include <string>


#include <cctype>

extern "C" {

// Call this function before any new action
SWIGEXPORT void SWIG_check_unhandled_exception_impl(const char* decl) {
  if (heffte_onemkl_ierr != 0) {
    // Construct message; calling the error string function ensures that
    // the string is allocated if the user did something goofy like
    // manually setting the integer. Since this function is not expected to
    // be wrapped by a catch statement, it will probably terminate the
    // program.
    std::string msg("An unhandled exception occurred before a call to ");
    msg += decl;
    msg += "; ";
    std::string prev_msg = heffte_onemkl_get_serr();
    prev_msg[0] = std::tolower(prev_msg[0]);
    msg += prev_msg;
    throw std::runtime_error(msg);
  }
}

// Save an exception to the fortran error code and string
SWIGEXPORT void SWIG_store_exception(const char *decl,
                                     int errcode,
                                     const char *msg) {
  ::heffte_onemkl_ierr = errcode;

  static std::string last_exception_msg;
  // Save the message to a std::string first
  last_exception_msg = "In ";
  last_exception_msg += decl;
  last_exception_msg += ": ";
  last_exception_msg += msg;
  swig_last_exception_cstr = last_exception_msg.c_str();
}
}


#include <typeinfo>
#include <stdexcept>


#include <mpi.h>


#include <stdint.h>


#include "heffte.h"


#include <complex>


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}



extern "C" {

typedef struct {
  float real;
  float imag;
} SwigComplex_float;

}


SWIGINTERN SwigComplex_float SWIG_create_complex_float(float real, float imag) {
  SwigComplex_float result;
  result.real = real;
  result.imag = imag;
  return result;
}



extern "C" {

typedef struct {
  double real;
  double imag;
} SwigComplex_double;

}


SWIGINTERN SwigComplex_double SWIG_create_complex_double(double real, double imag) {
  SwigComplex_double result;
  result.real = real;
  result.imag = imag;
  return result;
}


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destroy(SwigClassWrapper) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

SWIGINTERN SwigClassWrapper capture(SwigClassWrapper other) {
  other.cmemflags &= ~SWIG_MEM_RVALUE;
  return other;
}

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self = other;
    self.cmemflags &= ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destroy(self);
    }
    return capture(other);
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destroy(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destroy(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destroy(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      *self = swig::capture(other);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destroy(*self);
  } else if (self->cptr == other.cptr) {
    /* Self-assignment: ignore */
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_free_rvalue(SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;
  if (other.cmemflags & SWIG_MEM_RVALUE 
      && other.cmemflags & SWIG_MEM_OWN) {
    /* We own *and* are being passed an expiring value */
    Policy_t::destroy(other);
  }
}


extern "C" {
SWIGEXPORT SwigArrayWrapper _wrap_get_serr() {
  SwigArrayWrapper fresult ;
  char *result = 0 ;
  
  result = (char *)heffte_onemkl_get_serr();
  fresult.size = strlen((char*)(result));
  fresult.data = const_cast< char * >(result);
  return fresult;
}


SWIGEXPORT SWIGEXTERN const int _wrap_scale_onemkl_none = (int)(heffte::scale::none);

SWIGEXPORT SWIGEXTERN const int _wrap_scale_onemkl_full = (int)(heffte::scale::full);

SWIGEXPORT SWIGEXTERN const int _wrap_scale_onemkl_symmetric = (int)(heffte::scale::symmetric);

SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_onemkl__SWIG_4(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13, int const *farg14, int const *farg15, int const *farg16, int const *farg17, int const *farg18, int const *farg19, int const *farg20, int const *farg21, int const *farg22) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  MPI_Comm arg19 ;
  bool arg20 ;
  int arg21 ;
  bool arg22 ;
  heffte::fft3d< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = (int)(*farg13);
  arg14 = (int)(*farg14);
  arg15 = (int)(*farg15);
  arg16 = (int)(*farg16);
  arg17 = (int)(*farg17);
  arg18 = (int)(*farg18);
  arg19 = MPI_Comm_f2c((MPI_Fint)*farg19);
  arg20 = (*farg20 ? true : false);
  arg21 = (int)(*farg21);
  arg22 = (*farg22 ? true : false);
  result = (heffte::fft3d< heffte::backend::onemkl > *)new heffte::fft3d< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_onemkl__SWIG_5(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13, int const *farg14, int const *farg15, int const *farg16, int const *farg17, int const *farg18, int const *farg19) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  MPI_Comm arg19 ;
  heffte::fft3d< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = (int)(*farg13);
  arg14 = (int)(*farg14);
  arg15 = (int)(*farg15);
  arg16 = (int)(*farg16);
  arg17 = (int)(*farg17);
  arg18 = (int)(*farg18);
  arg19 = MPI_Comm_f2c((MPI_Fint)*farg19);
  result = (heffte::fft3d< heffte::backend::onemkl > *)new heffte::fft3d< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_onemkl__SWIG_6(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  MPI_Comm arg13 ;
  heffte::fft3d< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = MPI_Comm_f2c((MPI_Fint)*farg13);
  result = (heffte::fft3d< heffte::backend::onemkl > *)new heffte::fft3d< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long long _wrap_heffte_fft3d_onemkl_size_inbox(SwigClassWrapper *farg1) {
  long long fresult ;
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  long long result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::size_inbox() const", return 0);
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  result = (long long)((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->size_inbox();
  fresult = (long long)(result);
  return fresult;
}


SWIGEXPORT long long _wrap_heffte_fft3d_onemkl_size_outbox(SwigClassWrapper *farg1) {
  long long fresult ;
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  long long result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::size_outbox() const", return 0);
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  result = (long long)((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->size_outbox();
  fresult = (long long)(result);
  return fresult;
}


SWIGEXPORT double _wrap_heffte_fft3d_onemkl_get_scale_factor(SwigClassWrapper *farg1, int const *farg2) {
  double fresult ;
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  heffte::scale arg2 ;
  double result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::get_scale_factor(heffte::scale) const", return 0);
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (heffte::scale)(*farg2);
  result = (double)((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->get_scale_factor(arg2);
  fresult = (double)(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_heffte_fft3d_onemkl_size_workspace(SwigClassWrapper *farg1) {
  size_t fresult ;
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::size_workspace() const", return 0);
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  result = ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->size_workspace();
  fresult = (size_t)(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_heffte_fft3d_onemkl_size_comm_buffers(SwigClassWrapper *farg1) {
  size_t fresult ;
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::size_comm_buffers() const", return 0);
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  result = ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->size_comm_buffers();
  fresult = (size_t)(result);
  return fresult;
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_0(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_1(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_2(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_3(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_4(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(int const,float const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_5(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(int const,float const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_6(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(int const,float const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_7(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< float,std::complex< float > >(int const,float const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_8(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_9(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_10(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_11(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_12(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_13(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_14(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_15(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_16(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_17(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_18(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_19(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_20(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(int const,double const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_21(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(int const,double const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_22(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(int const,double const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_23(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< double,std::complex< double > >(int const,double const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_24(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_25(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_26(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_27(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_28(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_29(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_30(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_forward__SWIG_31(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::forward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_0(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_1(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_2(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_3(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_4(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(int const,std::complex< float > const [],float [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_5(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(int const,std::complex< float > const [],float [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_6(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(int const,std::complex< float > const [],float [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_7(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,float >(int const,std::complex< float > const [],float []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_8(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_9(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_10(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_11(SwigClassWrapper *farg1, SwigComplex_float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(std::complex< float > const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_12(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_13(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_14(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_15(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< float >,std::complex< float > >(int const,std::complex< float > const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,std::complex< float > >(arg2,(std::complex< float > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_16(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_17(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_18(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_19(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_20(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(int const,std::complex< double > const [],double [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_21(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(int const,std::complex< double > const [],double [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_22(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(int const,std::complex< double > const [],double [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_23(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,double >(int const,std::complex< double > const [],double []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_24(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, int const *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_25(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_26(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_27(SwigClassWrapper *farg1, SwigComplex_double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(std::complex< double > const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_28(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_29(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_30(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_backward__SWIG_31(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d< heffte::backend::onemkl > const *", "heffte_fft3d_onemkl", "heffte::fft3d< heffte::backend::onemkl >::backward< std::complex< double >,std::complex< double > >(int const,std::complex< double > const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,std::complex< double > >(arg2,(std::complex< double > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_delete_heffte_fft3d_onemkl(SwigClassWrapper *farg1) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  
  arg1 = (heffte::fft3d< heffte::backend::onemkl > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_heffte_fft3d_onemkl_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  heffte::fft3d< heffte::backend::onemkl > *arg1 = (heffte::fft3d< heffte::backend::onemkl > *) 0 ;
  heffte::fft3d< heffte::backend::onemkl > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<heffte::fft3d< heffte::backend::onemkl >, SWIGPOLICY_heffte_fft3d_Sl__Sp_heffte_backend_onemkl_SP__Sg_>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_r2c_onemkl__SWIG_4(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13, int const *farg14, int const *farg15, int const *farg16, int const *farg17, int const *farg18, int const *farg19, int const *farg20, int const *farg21, int const *farg22, int const *farg23) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  int arg19 ;
  MPI_Comm arg20 ;
  bool arg21 ;
  int arg22 ;
  bool arg23 ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = (int)(*farg13);
  arg14 = (int)(*farg14);
  arg15 = (int)(*farg15);
  arg16 = (int)(*farg16);
  arg17 = (int)(*farg17);
  arg18 = (int)(*farg18);
  arg19 = (int)(*farg19);
  arg20 = MPI_Comm_f2c((MPI_Fint)*farg20);
  arg21 = (*farg21 ? true : false);
  arg22 = (int)(*farg22);
  arg23 = (*farg23 ? true : false);
  result = (heffte::fft3d_r2c< heffte::backend::onemkl > *)new heffte::fft3d_r2c< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_r2c_onemkl__SWIG_5(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13, int const *farg14, int const *farg15, int const *farg16, int const *farg17, int const *farg18, int const *farg19, int const *farg20) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  int arg19 ;
  MPI_Comm arg20 ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = (int)(*farg13);
  arg14 = (int)(*farg14);
  arg15 = (int)(*farg15);
  arg16 = (int)(*farg16);
  arg17 = (int)(*farg17);
  arg18 = (int)(*farg18);
  arg19 = (int)(*farg19);
  arg20 = MPI_Comm_f2c((MPI_Fint)*farg20);
  result = (heffte::fft3d_r2c< heffte::backend::onemkl > *)new heffte::fft3d_r2c< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_heffte_fft3d_r2c_onemkl__SWIG_6(int const *farg1, int const *farg2, int const *farg3, int const *farg4, int const *farg5, int const *farg6, int const *farg7, int const *farg8, int const *farg9, int const *farg10, int const *farg11, int const *farg12, int const *farg13, int const *farg14) {
  SwigClassWrapper fresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  MPI_Comm arg14 ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *result = 0 ;
  
  arg1 = (int)(*farg1);
  arg2 = (int)(*farg2);
  arg3 = (int)(*farg3);
  arg4 = (int)(*farg4);
  arg5 = (int)(*farg5);
  arg6 = (int)(*farg6);
  arg7 = (int)(*farg7);
  arg8 = (int)(*farg8);
  arg9 = (int)(*farg9);
  arg10 = (int)(*farg10);
  arg11 = (int)(*farg11);
  arg12 = (int)(*farg12);
  arg13 = (int)(*farg13);
  arg14 = MPI_Comm_f2c((MPI_Fint)*farg14);
  result = (heffte::fft3d_r2c< heffte::backend::onemkl > *)new heffte::fft3d_r2c< heffte::backend::onemkl >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  fresult.cptr = (void*)result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT long long _wrap_heffte_fft3d_r2c_onemkl_size_inbox(SwigClassWrapper *farg1) {
  long long fresult ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  long long result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::size_inbox() const", return 0);
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  result = (long long)((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->size_inbox();
  fresult = (long long)(result);
  return fresult;
}


SWIGEXPORT long long _wrap_heffte_fft3d_r2c_onemkl_size_outbox(SwigClassWrapper *farg1) {
  long long fresult ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  long long result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::size_outbox() const", return 0);
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  result = (long long)((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->size_outbox();
  fresult = (long long)(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_heffte_fft3d_r2c_onemkl_size_workspace(SwigClassWrapper *farg1) {
  size_t fresult ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::size_workspace() const", return 0);
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  result = ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->size_workspace();
  fresult = (size_t)(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_heffte_fft3d_r2c_onemkl_size_comm_buffers(SwigClassWrapper *farg1) {
  size_t fresult ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  size_t result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::size_comm_buffers() const", return 0);
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  result = ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->size_comm_buffers();
  fresult = (size_t)(result);
  return fresult;
}


SWIGEXPORT double _wrap_heffte_fft3d_r2c_onemkl_get_scale_factor(SwigClassWrapper *farg1, int const *farg2) {
  double fresult ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  heffte::scale arg2 ;
  double result;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::get_scale_factor(heffte::scale) const", return 0);
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (heffte::scale)(*farg2);
  result = (double)((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->get_scale_factor(arg2);
  fresult = (double)(result);
  return fresult;
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_0(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, int const *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_1(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_2(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_3(SwigClassWrapper *farg1, float *farg2, SwigComplex_float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  float *arg2 ;
  std::complex< float > *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(float const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (float *)(farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >((float const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_4(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(int,float const [],std::complex< float > [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_5(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(int,float const [],std::complex< float > [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_6(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(int,float const [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_7(SwigClassWrapper *farg1, int const *farg2, float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< float,std::complex< float > >(int,float const [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< float,std::complex< float > >(arg2,(float const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_8(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, int const *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_9(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_10(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_11(SwigClassWrapper *farg1, double *farg2, SwigComplex_double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  double *arg2 ;
  std::complex< double > *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(double const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (double *)(farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >((double const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_12(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(int,double const [],std::complex< double > [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_13(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(int,double const [],std::complex< double > [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_14(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(int,double const [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_forward__SWIG_15(SwigClassWrapper *farg1, int const *farg2, double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::forward< double,std::complex< double > >(int,double const [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR forward< double,std::complex< double > >(arg2,(double const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_0(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, int const *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_1(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_2(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, SwigComplex_float *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_3(SwigClassWrapper *farg1, SwigComplex_float *farg2, float *farg3, SwigComplex_float *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< float > *arg2 ;
  float *arg3 ;
  std::complex< float > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(std::complex< float > const [],float [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< float > *)(farg2);
  arg3 = (float *)(farg3);
  arg4 = (std::complex< float > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >((std::complex< float > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_4(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, SwigComplex_float *farg5, int const *farg6) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  std::complex< float > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(int,std::complex< float > const [],float [],std::complex< float > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_5(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, SwigComplex_float *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  std::complex< float > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(int,std::complex< float > const [],float [],std::complex< float > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (std::complex< float > *)(farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_6(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(int,std::complex< float > const [],float [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_7(SwigClassWrapper *farg1, int const *farg2, SwigComplex_float *farg3, float *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< float > *arg3 ;
  float *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< float >,float >(int,std::complex< float > const [],float []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< float > *)(farg3);
  arg4 = (float *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< float >,float >(arg2,(std::complex< float > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_8(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, int const *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  heffte::scale arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (heffte::scale)(*farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_9(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_10(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, SwigComplex_double *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_11(SwigClassWrapper *farg1, SwigComplex_double *farg2, double *farg3, SwigComplex_double *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  std::complex< double > *arg2 ;
  double *arg3 ;
  std::complex< double > *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(std::complex< double > const [],double [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (std::complex< double > *)(farg2);
  arg3 = (double *)(farg3);
  arg4 = (std::complex< double > *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >((std::complex< double > const (*))arg2,arg3,arg4);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_12(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, SwigComplex_double *farg5, int const *farg6) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  std::complex< double > *arg5 ;
  heffte::scale arg6 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(int,std::complex< double > const [],double [],std::complex< double > [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  arg6 = (heffte::scale)(*farg6);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_13(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, SwigComplex_double *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  std::complex< double > *arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(int,std::complex< double > const [],double [],std::complex< double > []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (std::complex< double > *)(farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_14(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4, int const *farg5) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  heffte::scale arg5 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(int,std::complex< double > const [],double [],heffte::scale) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  arg5 = (heffte::scale)(*farg5);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4,arg5);
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_backward__SWIG_15(SwigClassWrapper *farg1, int const *farg2, SwigComplex_double *farg3, double *farg4) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  int arg2 ;
  std::complex< double > *arg3 ;
  double *arg4 ;
  
  SWIG_check_nonnull(farg1->cptr, "heffte::fft3d_r2c< heffte::backend::onemkl > const *", "heffte_fft3d_r2c_onemkl", "heffte::fft3d_r2c< heffte::backend::onemkl >::backward< std::complex< double >,double >(int,std::complex< double > const [],double []) const", return );
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  arg2 = (int)(*farg2);
  arg3 = (std::complex< double > *)(farg3);
  arg4 = (double *)(farg4);
  ((heffte::fft3d_r2c< heffte::backend::onemkl > const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR backward< std::complex< double >,double >(arg2,(std::complex< double > const (*))arg3,arg4);
}


SWIGEXPORT void _wrap_delete_heffte_fft3d_r2c_onemkl(SwigClassWrapper *farg1) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  
  arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *)farg1->cptr;
  delete arg1;
}


SWIGEXPORT void _wrap_heffte_fft3d_r2c_onemkl_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper *farg2) {
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg1 = (heffte::fft3d_r2c< heffte::backend::onemkl > *) 0 ;
  heffte::fft3d_r2c< heffte::backend::onemkl > *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<heffte::fft3d_r2c< heffte::backend::onemkl >, SWIGPOLICY_heffte_fft3d_r2c_Sl__Sp_heffte_backend_onemkl_SP__Sg_>(farg1, *farg2);
  
}


} // extern

